cmake_minimum_required(VERSION 2.8)

project(OpenANN)

find_package(Doxygen)
find_package(OpenMP)
find_package(CUDA)
include(cmake/UseDoxygen.cmake)
include(cmake/Utilities.cmake)
include(cmake/FindEigen3.cmake)

if(NOT EIGEN3_FOUND)
  message(FATAL_ERROR "Could not find Eigen 3 library. Download it from http://eigen.tuxfamily.org/ and install it with CMake.")
endif()

set(OPENANN_VERSION_NUMBER "1.0.0")
set(OPENANN_URL "https://github.com/AlexanderFabisch/OpenANN")
set(OPENANN_BRIEF_DESCRIPTION "An open source library for artificial neural networks.")
current_time(OPENANN_TIME) # cmake execution time
if(CUDA_FOUND)
  set(OPENANN_CUDA_FLAGS "-DCUDA_AVAILABLE -Dfpt=float -DVt=Eigen::VectorXf -D Mt=Eigen::MatrixXf")
else()
  set(OPENANN_CUDA_FLAGS "-Dfpt=double -DVt=Eigen::VectorXd -D Mt=Eigen::MatrixXd")
endif()
set(OPENANN_OPTIMIZATION_FLAGS) # TODO optimization flags
if(${CMAKE_BUILD_TYPE} STREQUAL Debug)
  message(STATUS "Debug configuration")
  if(CMAKE_COMPILER_IS_GNUCXX)
    compiler_check_add_flag("-ggdb")
  endif()
elseif(${CMAKE_BUILD_TYPE} STREQUAL Release)
  message(STATUS "Release configuration")
  if(CMAKE_COMPILER_IS_GNUCXX)
    compiler_check_add_flag("-g0")
    compiler_check_add_flag("-s")
  endif()
else()
  message(FATAL_ERROR "Unknown configuration, set CMAKE_BUILD_TYPE to Debug or Release")
endif()
set(OPENANN_COMPILER_FLAGS) # TODO determine optimization flags, warning flags etc.
if(CMAKE_COMPILER_IS_GNUCXX)
  set(COMPILER_WARNING_FLAGS "-Wall -Wextra -pedantic -Wno-long-long")
endif()
set(OPENANN_LINK_LIBS "-lopenann") # libraries to link for external executables
if(OPENMP_FOUND AND CMAKE_COMPILER_IS_GNUCXX)
  set(OPENANN_LINK_LIBS "${OPENANN_LINK_LIBS} -lgomp")
endif()

option(USE_GPL_LICENSE "Enable use of libraries that are under GPL license" OFF)
if(USE_GPL_LICENSE)
  set(OPENANN_COMPILER_FLAGS "${OPENANN_COMPILER_FLAGS} -DUSE_GPL_LICENSE")
  set(OPENANN_COMPILER_FLAGS "${OPENANN_COMPILER_FLAGS} ${OPENANN_OPTIMIZATION_FLAGS}")
endif()
add_subdirectory(lib)

include_directories(OpenANN ${EIGEN3_INCLUDE_DIRS} lib/CMA-ESpp)
add_definitions(${OPENANN_CUDA_FLAGS})
add_subdirectory(src)

add_subdirectory(test)

install(DIRECTORY OpenANN DESTINATION include)

option(BUILD_DOCUMENTATION "Build OpenANN documentation using doxygen" ON)
if(DOXYGEN_FOUND AND BUILD_DOCUMENTATION)
  if(DOXYGEN_DOT_FOUND)
    set(OPENANN_USE_DOT "YES")
  else()
    set(OPENANN_USE_DOT "NO")
  endif()
  configure_file(doxygen.cfg.in ${PROJECT_SOURCE_DIR}/doxygen.cfg)
  add_documentation(openann_doc doxygen.cfg)
  install_documentation(${PROJECT_BINARY_DIR}/html openann)
endif()

if(OPENMP_FOUND AND UNIX)
  set(OPENANN_LINK_LIBS "-lgomp")
endif()
configure_file(openann.pc.in openann.pc @ONLY)
string(REPLACE ":" ";" pkg_target_search "$ENV{PKG_CONFIG_LIBDIR}")
find_path(pkg_target_dir "pkgconfig" ${pkg_target_search} "${CMAKE_INSTALL_PREFIX}/share" ${pkg_target_search})
if(NOT pkg_target_dir)
  set(pkg_target_dir "${CMAKE_INSTALL_PREFIX}/share")
endif()
install(FILES "${PROJECT_BINARY_DIR}/openann.pc" DESTINATION "${pkg_target_dir}/pkgconfig")
