namespace OpenANN
{

/**

\mainpage

\b Table \b of \b contents
  - \ref License
  - \ref Requirements
  - \ref Features
  - \ref SimpleExample
  - \ref MoreExamples
  - \ref Howtos

This is the API documentation of OpenANN.

OpenANN is an open source library for artificial neural networks. It is open
for users that want to apply ANN to their problems, developers and researchers
that want to implement new technologies and students that want to understand
the tricks that are required to implement neural networks.

\section License

The license is LGPL 3. You can find the license text in the files COPYING and
COPYING.LESSER.

\section Requirements

Supported operating systems and compilers
  - Linux
  - GCC

Compilation
  - <a href="http://www.cmake.org" target=_blank>CMake</a>
  - pkg-config
  - <a href="http://eigen.tuxfamily.org" target=_blank>Eigen</a>
  - <a href="http://www.alglib.net" target=_blank>ALGLIB</a>

\code
mkdir build
cd build
cmake -D CMAKE_BUILD_TYPE:String=Release ..
sudo make install
sudo ldconfig
\endcode

Documentation
  - <a href="http://www.stack.nl/~dimitri/doxygen/" target=_blank>doxygen</a>
  - <a href="http://www.graphviz.org" target=_blank>Graphviz</a>

Examples
  - OpenGL
  - GLUT
  - libxmu
  - Qt4

Python bindings
  - Python
  - NumPy
  - Cython

sudo apt-get install ruby rubygems; sudo gem install rice

\section Features List of Features

  - artificial neural networks
    - multilayer neural network
    - convolutional neural network (CNN) with convolutional layers,
      subsampling layers and max-pooling layers
    - random projections for data and network compression and extreme learning
      machines
  - optimization algorithms
    - mini-batch stochastic gradient descent (MBSGD) for large networks
    - Levenberg-Marquardt algorithm (LMA) for small networks
    - (increasing population size) covariance matrix adaption evolution
      strategies (IPOPCMAES) for reinforcement learning
  - supported languages
    - C++
    - Python bindings

\section SimpleExample A Simple Example

C++
\code
#include <OpenANN>
#include <Eigen/Dense>
#include <iostream>

using namespace OpenANN;

int main()
{
  Eigen::MatrixXf x(1, 1);
  x.fill(2.0f);
  Eigen::MatrixXf t(1, 1);
  t.fill(5.0f);

  DeepNetwork net;
  net.inputLayer(1)
     .fullyConnectedLayer(3, TANH)
     .fullyConnectedLayer(3, TANH)
     .outputLayer(1, LINEAR)
     .trainingSet(x, t);

  StoppingCriteria stop;
  stop.maximalIterations = 10;
  std::cout << "Error on training set before training: " << net.error()
      << std::endl;
  net.train(BATCH_LMA, SSE, stop);
  Eigen::VectorXf y = net(x);
  std::cout << "Error on training set after training: " << net.error()
      << std::endl;

  return 0;
}
\endcode

Python
\code
from openann import *
import numpy

if __name__ == "__main__":
  # Create noisy sine
  # Each column of these matrices contains an instance
  inputs = numpy.atleast_2d(numpy.linspace(0, 2*numpy.pi, 500))
  outputs = numpy.sin(numpy.random.normal(inputs, numpy.ones(500)*0.1))

  # Setup network
  net = DeepNetwork()
  net.input_layer(1, True, 0.05)
  net.fully_connected_layer(200, "rectifier", True)
  net.output_layer(1, "linear")
  net.training_set(inputs, outputs)
  stop_dict = {"maximalIterations" : 10,
               "minimalValueDifferences" : 1e-8}
  net.train("lma", "sse", stop_dict)
\endcode

Compile it with pkg-config and g++:

\code
g++ main.cpp `pkg-config --cflags --libs openann`
\endcode

\section MoreExamples More Examples

Classification

  - \ref TwoSpirals

Reinforcement Learning

  - \ref PB

We also have some \ref Benchmarks that show how you can use ANNs and compare
different architectures.

\section Howtos

  - \ref CreateDataSet
  - \ref Contributing

*/

}
