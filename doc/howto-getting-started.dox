namespace OpenANN {

/**

\page GettingStarted Getting Started

\section Cpp A simple example in C++

\code
#include <OpenANN/OpenANN>
#include <Eigen/Dense>
#include <iostream>

using namespace OpenANN;

int main()
{
  // Create dataset
  const int D = 2;
  const int F = 1;
  const int N = 4;
  Eigen::MatrixXd x(D, N);
  Eigen::MatrixXd t(F, N);
  x.col(0) << 0.0, 1.0; t.col(0) << 1.0;
  x.col(1) << 0.0, 0.0; t.col(1) << 0.0;
  x.col(2) << 1.0, 1.0; t.col(2) << 0.0;
  x.col(3) << 1.0, 0.0; t.col(3) << 1.0;

  // Create network
  Net net;
  net.inputLayer(D)
     .fullyConnectedLayer(3, LOGISTIC)
     .outputLayer(F, LOGISTIC)
     .trainingSet(x, t);

  // Train network
  StoppingCriteria stop;
  stop.minimalValueDifferences = 1e-10;
  train(net, "LMA", SSE, stop);

  // Use network
  for(int n = 0; n < N; n++)
  {
    Eigen::VectorXd y = net(x.col(n));
    std::cout << y << std::endl;
  }

  return 0;
}
\endcode

Compile it with pkg-config and g++ (and really make sure that pkg-config is
installed otherwise you might got misleading errors):

\code
g++ main.cpp -o openann `pkg-config --cflags --libs openann`
\endcode

\section Python A simple example in Python

\code
from openann import *
import numpy

if __name__ == "__main__":
  # Create dataset
  X = numpy.array([[0, 1], [0, 0], [1, 1], [1, 0]]).T
  Y = numpy.array([[1], [0], [0], [1]]).T
  D = X.shape[0]
  F = Y.shape[0]
  N = X.shape[1]

  # Create network
  net = Net()
  net.input_layer(D)
  net.fully_connected_layer(3, "logistic")
  net.output_layer(F, "logistic")
  net.training_set(X, Y)

  # Train network
  stop_dict = {"minimalValueDifferences" : 1e-10}
  net.train("LMA", "sse", stop_dict)

  # Use network
  for n in range(N):
    y = net.predict(X[:, n])
    print y
\endcode

\section MoreExamples More Examples

Classification

  - \ref XOR
  - \ref TwoSpirals

Reinforcement Learning

  - \ref PB

We also have some \ref Benchmarks that show how you can use ANNs and compare
different architectures.

*/

}